// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planor.Infrastructure.Persistence;

#nullable disable

namespace Planor.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231230154415_updatedFinanceAddedDateColumn")]
    partial class updatedFinanceAddedDateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<string>("AttendeeId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("AttendeeId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Planor.Domain.Entities.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("app");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Blob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("uri");

                    b.HasKey("Id");

                    b.ToTable("blob");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isDefault");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("rate");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("District")
                        .HasColumnType("longtext")
                        .HasColumnName("district");

                    b.Property<string>("GovernmentId")
                        .HasColumnType("longtext")
                        .HasColumnName("government_id");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<int?>("ImageSmallId")
                        .HasColumnType("int")
                        .HasColumnName("image_small_id");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_company");

                    b.Property<bool>("IsPotantial")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_potantial");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext")
                        .HasColumnName("post_code");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Website")
                        .HasColumnType("longtext")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ImageSmallId");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Duty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("longtext")
                        .HasColumnName("assigned_to");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("completed");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("description");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("priority_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("size_id");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SizeId");

                    b.ToTable("duties");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("duty_categories");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("duty_priorities");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("duty_sizes");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyTodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("content");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int>("DutyId")
                        .HasColumnType("int")
                        .HasColumnName("duty_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("DutyId");

                    b.ToTable("duty_todos");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("color");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<long?>("End")
                        .HasColumnType("bigint")
                        .HasColumnName("end");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Location")
                        .HasColumnType("longtext")
                        .HasColumnName("location");

                    b.Property<long>("Start")
                        .HasColumnType("bigint")
                        .HasColumnName("start");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Finance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<float>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("finance_category_id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<long>("Date")
                        .HasColumnType("bigint")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_income");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("finances");
                });

            modelBuilder.Entity("Planor.Domain.Entities.FinanceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("finance_categories");
                });

            modelBuilder.Entity("Planor.Domain.Entities.MailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("slug");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("mail_templates");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_id");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("description");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long>("Created")
                        .HasColumnType("bigint")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<long?>("LastModified")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("slug");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tenant");
                });

            modelBuilder.Entity("Planor.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarSmallId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("AvatarSmallId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("customer_join_tag", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("customer_join_tag");
                });

            modelBuilder.Entity("duty_tag_join", b =>
                {
                    b.Property<int>("DutyId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("DutyId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("duty_tag_join");
                });

            modelBuilder.Entity("project_join_tag", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("project_join_tag");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("Planor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Planor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Planor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Planor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planor.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Planor.Domain.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Planor.Domain.Entities.Blob", "ImageSmall")
                        .WithMany()
                        .HasForeignKey("ImageSmallId");

                    b.Navigation("Currency");

                    b.Navigation("Image");

                    b.Navigation("ImageSmall");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Duty", b =>
                {
                    b.HasOne("Planor.Domain.Entities.DutyCategory", "Category")
                        .WithMany("Duties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.DutyPriority", "Priority")
                        .WithMany("Duties")
                        .HasForeignKey("PriorityId");

                    b.HasOne("Planor.Domain.Entities.Project", "Project")
                        .WithMany("Duties")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.DutySize", "Size")
                        .WithMany("Duties")
                        .HasForeignKey("SizeId");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyTodo", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Duty", "Duty")
                        .WithMany("Todos")
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Finance", b =>
                {
                    b.HasOne("Planor.Domain.Entities.FinanceCategory", "Category")
                        .WithMany("Finances")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.Customer", "Customer")
                        .WithMany("Finances")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Planor.Domain.Entities.Project", "Project")
                        .WithMany("Finances")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Category");

                    b.Navigation("Customer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Event", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Project", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Currency", "Currency")
                        .WithMany("Projects")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Planor.Domain.Entities.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Planor.Domain.Entities.User", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Blob", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Planor.Domain.Entities.Blob", "AvatarSmall")
                        .WithMany()
                        .HasForeignKey("AvatarSmallId");

                    b.HasOne("Planor.Domain.Entities.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Avatar");

                    b.Navigation("AvatarSmall");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("customer_join_tag", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("duty_tag_join", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Duty", null)
                        .WithMany()
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project_join_tag", b =>
                {
                    b.HasOne("Planor.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planor.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planor.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Finances");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Duty", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyCategory", b =>
                {
                    b.Navigation("Duties");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutyPriority", b =>
                {
                    b.Navigation("Duties");
                });

            modelBuilder.Entity("Planor.Domain.Entities.DutySize", b =>
                {
                    b.Navigation("Duties");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Event", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Planor.Domain.Entities.FinanceCategory", b =>
                {
                    b.Navigation("Finances");
                });

            modelBuilder.Entity("Planor.Domain.Entities.Project", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Finances");
                });
#pragma warning restore 612, 618
        }
    }
}
